def solution(train):
    answer = -1
    # 최소 몇명이 뒤돌아야하나
    n = len(train)
    m = len(train[0])
    graph = [['']*m for _ in range(n)]
    for i in range(n):
        for j in range(m):
            graph[i][j] = train[i][j]


    s = []
    dxs = [0, 1, 0, -1]
    dys = [1, 0, -1, 0]
    
    change = ["W", "E", "S", "N"]
    arrow = {"W": "E", "S": "N", "E": "W", "N": "S"}
    


    def in_range(nx, ny):
        return 0 <= nx < n and 0 <= ny < m 

    def can_go(nx, ny):
        return in_range(nx, ny) and (nx, ny) not in s

    # 마주보는 곳들 탐색
    for x in range(n):
        for y in range(m):
            for dx, dy in zip(dxs, dys):
                nx = x + dx
                ny = y + dy

                if can_go(nx, ny):
                #     # 사방 중 기차 중간 값과 마주보는 고이 있으면
                    # print(train[x][y], arrow[train[nx][ny]])
                    if graph[x][y] == arrow[graph[nx][ny]]:
                        s.append((x, y))
                        s.append((nx, ny))


    answer = len(s)
    face_to_face = False
    
    # 가로
    dxs1 = [0, 0]
    dys1 = [1, -1]
    # 세로
    dxs2 = [1, -1]
    dys2 = [0, 0]

    # 마주보는 기차 방향 바꿔보기
    for x, y in s:
        for a in change:
            if graph[x][y] == a:
                continue
            
            if a == 'W' or a == 'E':
                for dx, dy in zip(dxs1, dys1):
                    nx = x + dx
                    ny = y + dy

                    if in_range(nx, ny):
                        print("가로", a, arrow[graph[nx][ny]])
                        
                        # 가로만 살펴본다
                        if a == arrow[graph[nx][ny]]:
                            face_to_face = True
                            break

            elif a == 'S' or a == 'N':
                for dx, dy in zip(dxs2, dys2):
                    nx = x + dx
                    ny = y + dy

                    if in_range(nx, ny):
                        print("세로", a, arrow[graph[nx][ny]])
                        if a == arrow[graph[nx][ny]]:
                            face_to_face = True
                            break

                
            if not face_to_face:
                graph[x][y] = a
                answer -= 1
                break
            
                
                

                    
    print(answer)
    return answer

solution(["ESS", "EEW", "NNW"])
